name: Generate Test Cases from User Stories

on: 
  workflow_dispatch: # allows manual triggering
  push:
    branches:
      - develop

permissions:
  contents: write       # allow committing generated file
  models: read          # required for accessing GitHub Models API

jobs:
  generate-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Call GitHub AI model to generate/update test cases
      id: generate_tests
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ ! -f "user_stories_database.json" ]; then
          echo "❌ Error: user_stories_database.json not found"
          exit 1
        fi

        echo "🧠 Generating/updating test cases via GitHub Model..."
        
        # Read user stories
        STORIES=$(cat user_stories_database.json)
        
        # Read existing test file if it exists
        EXISTING_TESTS=""
        if [ -f "GHFollowersTests/GeneratedUserStoryTests.swift" ]; then
          EXISTING_TESTS=$(cat GHFollowersTests/GeneratedUserStoryTests.swift)
        fi
        
        # Create the prompt for updating/creating test cases
        cat > prompt.txt << 'EOF'
        Generate Swift Testing framework tests for GHFollowers UIKit iOS app.

        PROJECT CONTEXT:
        - UIKit iOS app for GitHub follower management
        - Main screens: SearchVC, FollowerListVC, UserInfoVC, FavoritesListVC
        - Uses Swift Testing framework (import Testing), NOT XCTest
        - Custom UI components: GFButton, GFTextField, GFAvatarImageView, etc.
        - Models: Follower(login: String, avatarUrl: String), User

        TEST REQUIREMENTS:
        - Single file: GeneratedUserStoryTests.swift
        - File header: // GeneratedUserStoryTests.swift, 
                       // AUTO-GENERATED, current date/time, 
                       // Copyright © 2025 Kimchhorng Pheng
        - Imports: import Testing, import UIKit, @testable import GHFollowers
        - @MainActor struct GeneratedUserStoryTests
        - Test format: // US-XXX: Title, @Test("US-XXX: Description"), func testDescription()
        - Assertions: Only use #expect(condition) style.
             Examples: #expect(alert.titleLabel.text == "Empty Username")
             Do NOT use #expect(value).to(equal(...)) or any XCTest/Quick syntax.
        - Error handling: Issue.record("message")
        - Async: RunLoop.current.run(until: Date(timeIntervalSinceNow: 0.05))
        - UI setup: UIWindow(frame: UIScreen.main.bounds), UINavigationController
        - View lifecycle: _ = vc.view, vc.loadViewIfNeeded()
        - Data: Follower(login: "username", avatarUrl: "")

        IMPORTANT:
        - Only use #expect(condition) for assertions.
        - Rewrite any old .to(equal(...)) patterns to #expect(value == expected)
        - Always ensure assertions follow #expect(value == expected) format.

        COMMON PATTERNS:
        - SearchVC: UINavigationController + UIWindow setup, text field validation
        - FollowerListVC: Collection view setup, data source configuration, search filtering
        - UserInfoVC: Modal presentation, navigation controller
        - Empty states: UIContentUnavailableConfiguration assertions
        - Gestures: Check gestureRecognizers array
        - Lifecycle: viewWillAppear(), viewDidLoad() triggers

        OUTPUT: Raw Swift code only, no markdown or explanations.

        User stories:
        EOF
        
        # Append user stories to prompt
        cat user_stories_database.json >> prompt.txt
        
        # Append existing tests if they exist
        if [ -f "GHFollowersTests/GeneratedUserStoryTests.swift" ]; then
          echo "" >> prompt.txt
          echo "Existing test file (update this with new patterns):" >> prompt.txt
          cat GHFollowersTests/GeneratedUserStoryTests.swift >> prompt.txt
        fi
        
        # # Add reference to the existing ManualGHFollowersTests.swift for pattern matching
        # echo "" >> prompt.txt
        # echo "Reference file (ManualGHFollowersTests.swift) for exact pattern matching:" >> prompt.txt
        # cat GHFollowersTests/ManualGHFollowersTests.swift >> prompt.txt
        
        # Read the complete prompt
        PROMPT=$(cat prompt.txt)

        # Call GitHub AI model using the same format as test_open_api.yml
        echo "🔍 Calling GitHub AI model..."
        
        # Escape the prompt for JSON
        ESCAPED_PROMPT=$(echo "$PROMPT" | jq -Rs .)
        
        RAW_RESPONSE=$(curl -s "https://models.github.ai/inference/chat/completions" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -d "{
            \"model\": \"openai/gpt-4o-mini\",
            \"messages\": [
              {\"role\": \"user\", \"content\": $ESCAPED_PROMPT}
            ]
          }")
        
        echo "🔍 Raw response (first 200 chars):"
        echo "$RAW_RESPONSE" | head -c 200
        echo ""
        
        # Check if response is valid JSON
        if echo "$RAW_RESPONSE" | jq . > /dev/null 2>&1; then
          echo "🪶 Full AI model JSON response (truncated to 2000 chars):"
          echo "$RAW_RESPONSE" | jq . | head -c 2000
          echo ""
          echo "✅ Valid JSON response received"
          RESPONSE=$(echo "$RAW_RESPONSE" | jq -r '.choices[0].message.content')
        else
          echo "❌ Invalid JSON response, using raw response as fallback"
          RESPONSE="$RAW_RESPONSE"
        fi

        # Create output directory and save generated file
        mkdir -p GHFollowersTests
        
        # Clean up any markdown formatting that might be in the response
        CLEAN_RESPONSE=$(echo "$RESPONSE" | sed 's/```swift//g' | sed 's/```//g' | sed '/^Below are the generated Swift test files/d' | sed '/^### Generated.*Tests\.swift/d' | sed '/^```swift/d' | sed '/^```$/d')
        
        if [ -z "$CLEAN_RESPONSE" ]; then
          echo "❌ AI returned empty response — skipping file write"
          echo "file_generated=false" >> "$GITHUB_OUTPUT"
          exit 1
        fi

        echo "$CLEAN_RESPONSE" > GHFollowersTests/GeneratedUserStoryTests.swift

        # Clean up temporary files
        rm -f prompt.txt

        if [ -f GHFollowersTests/GeneratedUserStoryTests.swift ] && [ -s GHFollowersTests/GeneratedUserStoryTests.swift ]; then
          echo "✅ Test file generated/updated successfully"
          echo "$GITHUB_OUTPUT"
          echo "file_generated=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Test file generation failed - file is empty or doesn't exist"
          echo "file_generated=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Commit and push generated test file
      if: steps.generate_tests.outputs.file_generated == 'true'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add GHFollowersTests/GeneratedUserStoryTests.swift
        git commit -m "Update GeneratedUserStoryTests with latest user stories" || echo "No changes to commit"
        git push

  build-and-run-tests:
    needs: generate-tests
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Build and Run Tests
        run: |
         xcodebuild test \
          -scheme GHFollowers \
          -destination 'platform=iOS Simulator,name=iPhone 16,OS=18.5,arch=arm64' \
          -only-testing GHFollowersTests/GeneratedUserStoryTests \
          | xcbeautify
